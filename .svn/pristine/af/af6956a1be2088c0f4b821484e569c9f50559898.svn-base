/**
 * @file avltree.cpp
 * Definitions of the binary tree functions you'll be writing for this lab.
 * You'll need to modify this file.
 */

template <class K, class V>
V AVLTree<K, V>::find(const K& key) const
{
    return find(root, key);
}

template <class K, class V>
V AVLTree<K, V>::find(Node* subtree, const K& key) const
{
    if (subtree == NULL)
        return V();
    else if (key == subtree->key)
        return subtree->value;
    else {
        if (key < subtree->key)
            return find(subtree->left, key);
        else
            return find(subtree->right, key);
    }
}

template <class K, class V>
void AVLTree<K, V>::rotateLeft(Node*& t)
{
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    // your code here
    t->height = t->height - 2;
    t->balanceFactor = t->balanceFactor + 2;
    Node* p = t->right;
    p->left = t;
    t = p;


    p->balanceFactor++;
    cout<<"left rotate"<<endl;
}

template <class K, class V>
void AVLTree<K, V>::rotateLeftRight(Node*& t)
{
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    // Implemented for you:
    rotateLeft(t->left);
    rotateRight(t);
}

template <class K, class V>
void AVLTree<K, V>::rotateRight(Node*& t)
{
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    // your code here
    t->height = t->height - 2;
    t->balanceFactor = t->balanceFactor - 2;
    Node* p = t->left;
    p->right = t;
    t = p;
    p->balanceFactor--;
}

template <class K, class V>
void AVLTree<K, V>::rotateRightLeft(Node*& t)
{
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    // your code here
    rotateRight(t->right);
    rotateLeft(t);
}

template <class K, class V>
void AVLTree<K, V>::rebalance(Node*& subtree)
{
  if(subtree->balanceFactor == 2){
    if(subtree->left->balanceFactor == 1)
      rotateRight(subtree);
    else
      rotateLeftRight(subtree);
  }
  if(subtree->balanceFactor == -2){
      cout<<"left1"<<endl;
    if(subtree->right->balanceFactor == -1){
      cout<<"left"<<endl;
      rotateLeft(subtree);
    }
    else
      rotateRightLeft(subtree);
  }
    // your code here
}

template <class K, class V>
void AVLTree<K, V>::insert(const K & key, const V & value)
{
    insert(root, key, value);
}

// template <class K, class V>
// void AVLTree<K, V>::balanced(){
//   if(root)
// }
// template <class K, class V>
// Node* AVLTree<K, V>::findLastUnbalanced(Node*& subtree){
//   if(subtree == NULL)
//     return NULL;
//   if(subtree->left == NULL && subtree->right == NULL)
//     return NULL;
//   else if(subtree->left == NULL && subtree->right != NULL)
//     return
//
//
// }
template <class K, class V>
int AVLTree<K, V>::getBalance(Node*& subtree)
{
  if(subtree->left == NULL)
    return subtree->right->height + 1;
  if(subtree->right == NULL)
    return subtree->left->height + 1;
  int balance = subtree->left->height - subtree->right->height;
  subtree->balanceFactor = balance;
  return balance;
}
template <class K, class V>
void AVLTree<K, V>::insert(Node*& subtree, const K& key, const V& value)
{
    // your code here
    if(subtree == NULL){
      Node* n = new Node(key, value);
      subtree = n;
      // if(!balanced()){
      //   Node* t = findLastUnbalanced(root);
      //   rebalance(t);
      // }
      return;
    }
    if(key < subtree->key){
      subtree->height++;
      insert(subtree->left, key, value);
    }
    else if(key > subtree->key){
      subtree->height++;
      insert(subtree->right, key, value);
    }
    else{
      subtree->value = value;
    }
    int balance = getBalance(subtree);
    cout<<"balance = "<<balance<<endl;
    if(balance > 1){
        cout<<"rebalance!!!!"<<endl;
        cout<<"balance = "<<balance<<endl;
        rebalance(subtree);
        cout<<"rebalance"<<endl;

    }
}

template <class K, class V>
void AVLTree<K, V>::remove(const K& key)
{
    remove(root, key);
}

template <class K, class V>
void AVLTree<K, V>::remove(Node*& subtree, const K& key)
{
    if (subtree == NULL)
        return;

    if (key < subtree->key) {
        // your code here
    } else if (key > subtree->key) {
        // your code here
    } else {
        if (subtree->left == NULL && subtree->right == NULL) {
            /* no-child remove */
            // your code here
        } else if (subtree->left != NULL && subtree->right != NULL) {
            /* two-child remove */
            // your code here
        } else {
            /* one-child remove */
            // your code here
        }
        // your code here
    }
}
