/**
 * @file kdtree.cpp
 * Implementation of KDTree class.
 */

template <int Dim>
bool KDTree<Dim>::smallerDimVal(const Point<Dim>& first,
                                const Point<Dim>& second, int curDim) const
{
    /**
     * @todo Implement this function!
     */
    if(first[curDim] < second[curDim])
      return true;
    if(second[curDim] < first[curDim])
      return false;
    return first < second;
}

template <int Dim>
bool KDTree<Dim>::shouldReplace(const Point<Dim>& target,
                                const Point<Dim>& currentBest,
                                const Point<Dim>& potential) const
{
    /**
     * @todo Implement this function!
     */
    return false;
}

template <int Dim>
KDTree<Dim>::KDTree(const vector<Point<Dim>>& newPoints)
{
    /**
     * @todo Implement this function!
     */
  points = newPoints;
  buildTree(0, points.size()-1, (points.size()-1)/2, 0);
}
template <int Dim>
void KDTree<Dim>::buildTree(int start, int end, int k, int curDim)
{
  if(start >= end || end < 0)
    return;

  select(start, end, k, curDim);
  if(start < k -1)
    buildTree(start, k-1, (k-1+start)/2, (curDim + 1) % Dim);
  if(end > k + 1)
    buildTree(k+1, end, (end+k-1)/2, (curDim + 1) % Dim);
}
template <int Dim>
void KDTree<Dim>::select(int start, int end, int k, int curDim)
{
  if(start == end)
    return;
  cout<<start<<endl;
  cout<<end<<endl;
  int split = partition(start, end, curDim);
  int len = split - start + 1;
  if(len == k)
    return;
  if(k < len)
    return select(start, split - 1, k, curDim);
  return select(split + 1, end, k - len, curDim);
}
template <int Dim>
int KDTree<Dim>::partition(int start, int end, int curDim)
{
  Point<Dim> pivot = points[start];
  int leftmark = start + 1;
  int rightmark = end;
  while(true){
    while(leftmark < end && smallerDimVal(points[leftmark], pivot, curDim))
      leftmark ++;
    while(rightmark > start && smallerDimVal(pivot, points[rightmark], curDim))
      rightmark --;
    if(leftmark >= rightmark)
      break;
    else{
      Point<Dim> temp = points[leftmark];
      points[leftmark] = points[rightmark];
      points[rightmark] = temp;
    }
  }
  Point<Dim> temp = points[start];
  points[start] = points[rightmark];
  points[rightmark] = temp;
  return rightmark;
}
template <int Dim>
Point<Dim> KDTree<Dim>::findNearestNeighbor(const Point<Dim>& query) const
{
    /**
     * @todo Implement this function!
     */
    return Point<Dim>();
}
