/**
 * @file list.cpp
 * Doubly Linked List (MP 3).
 *
 * @author Chase Geigle
 * @date (created) Fall 2011
 * @date (modified) Spring 2012, Fall 2012
 *
 * @author Jack Toole
 * @date (modified) Fall 2011
 */
#include <iostream>
using namespace std;
/**
 * Destroys the current List. This function should ensure that
 * memory does not leak on destruction of a list.
 */
template <class T>
List<T>::~List()
{
    clear();
    /// @todo Graded in MP3.1
}

/**
 * Destroys all dynamically allocated memory associated with the current
 * List class.
 */
template <class T>
void List<T>::clear()
{
    ListNode *p = head;
    if(empty())
        return;
    while(p->next != NULL){
       p = p->next;
       //if(p->prev) cout << p->prev->data << endl;
       delete p->prev;
    }
    delete p;
    tail =NULL;
    length = 0;
}

/**
 * Inserts a new node at the front of the List.
 * This function **SHOULD** create a new ListNode.
 *
 * @param ndata The data to be inserted.
 */
template <class T>
void List<T>::insertFront(T const& ndata)
{

    ListNode * node= new ListNode(ndata);

    node->next = head;
    if (node->next!=NULL)
        node->next->prev = node;
    head = node;
    if (tail==NULL)
        tail = node;
    node->prev = NULL;
    length++;


    /// @todo Graded in MP3.1
}

/**
 * Inserts a new node at the back of the List.
 * This function **SHOULD** create a new ListNode.
 *
 * @param ndata The data to be inserted.
 */
template <class T>
void List<T>::insertBack(const T& ndata)
{

    ListNode * node= new ListNode(ndata);
    if (head==NULL)
        head = node;
    node->prev = tail;
    if (node->prev!=NULL)
        node->prev->next = node;
    tail = node;
    node->next = NULL;
    length++;

    /// @todo Graded in MP3.1
}

/**
 * Reverses the current List.
 */
template <class T>
void List<T>::reverse()
{
    if(head == NULL || tail == NULL)
        return;
    reverse(head, tail);
}

/**
 * Helper function to reverse a sequence of linked memory inside a List,
 * starting at startPoint and ending at endPoint. You are responsible for
 * updating startPoint and endPoint to point to the new starting and ending
 * points of the rearranged sequence of linked memory in question.
 *
 * @param startPoint A pointer reference to the first node in the sequence
 *  to be reversed.
 * @param endPoint A pointer reference to the last node in the sequence to
 *  be reversed.
 */
template <class T>
void List<T>::reverse(ListNode*& startPoint, ListNode*& endPoint)
{
    ListNode * start = startPoint;
    startPoint = endPoint;
    ListNode * p = startPoint;
    while(endPoint != start){
      // p = endpoint ||endpoint->ne=endpoint->pr ||4->pr->pr = endpoint
        p->next = endPoint->prev;
        //p->next->prev = p; // endPoint->prev->prev = p
        endPoint = endPoint->prev;
        p = p->next;
        //cout << endPoint->data << endl;
    }
    //cout<<p->data<<endl;
    p->next = NULL;
    if (start->prev != NULL){
      startPoint->prev = start->prev;
      start->prev->next = startPoint;
    }
    else
      startPoint->prev = NULL;
    //cout<<startPoint->data<<endl;
    //cout<<endPoint->data<<endl;
    p = startPoint;
    //p->prev = NULL;
    while (p != endPoint){
      p->next->prev = p;
      p = p->next;
    }

    /// @todo Graded in MP3.1
}

/**
 * Reverses blocks of size n in the current List. You should use your
 * reverse( ListNode * &, ListNode * & ) helper function in this method!
 *
 * @param n The size of the blocks in the List to be reversed.
 */
template <class T>
void List<T>::reverseNth(int n)
{
  if(empty())
    return;
  ListNode* curr = head;
  int remain = length;
  if (remain == n){
    reverse(head, tail);
    return;
  }
  ListNode* p;
  while (remain > n){
    ListNode* start = curr;

    for (int i = 0; i < n-1; i++){
        curr = curr->next;
    }
    p = curr->next;
    reverse( start, curr);
    curr->next = p;
    p->prev = curr;
    curr = p;

    if (remain == length)
      head = start;

    remain -= n;
  }
    p = curr->prev;
    reverse( curr, tail);
    p->next = curr;
    curr-> prev = p;
    cout<<curr->prev->data<<' '<<p->data<<endl;

    /// @todo Graded in MP3.1
}

/**
 * Modifies the List using the waterfall algorithm.
 * Every other node (starting from the second one) is removed from the
 * List, but appended at the back, becoming the new tail. This continues
 * until the next thing to be removed is either the tail (**not necessarily
 * the original tail!**) or NULL.  You may **NOT** allocate new ListNodes.
 * Note that since the tail should be continuously updated, some nodes will
 * be moved more than once.
 */
template <class T>
void List<T>::waterfall()
{
  if(empty())
    return;
  ListNode* p = head;
  ListNode* curr = p;
  int i=0;
  while (curr->next != tail && curr->next != NULL){
    p = p->next;
    curr->next = p->next;
    curr->next->prev = curr;
    tail->next = p;
    p->prev = tail;
    p->next = NULL;
    tail = p;
    curr = curr->next;
    p = curr;
    cout<<p->data<<' '<<curr->data<<endl;
    i++;
  }
    /// @todo Graded in MP3.1
}

/**
 * Splits the given list into two parts by dividing it at the splitPoint.
 *
 * @param splitPoint Point at which the list should be split into two.
 * @return The second list created from the split.
 */
template <class T>
List<T> List<T>::split(int splitPoint)
{
    if (splitPoint > length)
        return List<T>();

    if (splitPoint < 0)
        splitPoint = 0;

    ListNode* secondHead = split(head, splitPoint);

    int oldLength = length;
    if (secondHead == head) {
        // current list is going to be empty
        head = NULL;
        tail = NULL;
        length = 0;
    } else {
        // set up current list
        tail = head;
        while (tail->next != NULL)
            tail = tail->next;
        length = splitPoint;
    }

    // set up the returned list
    List<T> ret;
    ret.head = secondHead;
    ret.tail = secondHead;
    if (ret.tail != NULL) {
        while (ret.tail->next != NULL)
            ret.tail = ret.tail->next;
    }
    ret.length = oldLength - splitPoint;
    return ret;
}

/**
 * Helper function to split a sequence of linked memory at the node
 * splitPoint steps **after** start. In other words, it should disconnect
 * the sequence of linked memory after the given number of nodes, and
 * return a pointer to the starting node of the new sequence of linked
 * memory.
 *
 * This function **SHOULD NOT** create **ANY** new List objects!
 *
 * @param start The node to start from.
 * @param splitPoint The number of steps to walk before splitting.
 * @return The starting node of the sequence that was split off.
 */
template <class T>
typename List<T>::ListNode* List<T>::split(ListNode* start, int splitPoint)
{
    /// @todo Graded in MP3.2
 

    for (int i = 0; i < splitPoint; i++)
        start = start->next;
    start->prev->next = NULL;
    start->prev = NULL;
    return start; // change me!
}

/**
 * Merges the given sorted list into the current sorted list.
 *
 * @param otherList List to be merged into the current list.
 */
template <class T>
void List<T>::mergeWith(List<T>& otherList)
{
    // set up the current list
    head = merge(head, otherList.head);
    tail = head;

    // make sure there is a node in the new list
    if (tail != NULL) {
        while (tail->next != NULL)
            tail = tail->next;
    }
    length = length + otherList.length;

    // empty out the parameter list
    otherList.head = NULL;
    otherList.tail = NULL;
    otherList.length = 0;
}

/**
 * Helper function to merge two **sorted** and **independent** sequences of
 * linked memory. The result should be a single sequence that is itself
 * sorted.
 *
 * This function **SHOULD NOT** create **ANY** new List objects.
 *
 * @param first The starting node of the first sequence.
 * @param second The starting node of the second sequence.
 * @return The starting node of the resulting, sorted sequence.
 */
template <class T>
typename List<T>::ListNode* List<T>::merge(ListNode* first, ListNode* second)
{
    /// @todo Graded in MP3.2
    ListNode* p1 = first;
    ListNode* p2 = second;
    ListNode* temp;
    while(p1 != NULL && p2 != NULL){

            while(p1->data < p2->data && p1->next != NULL)
                p1 = p1->next;
            temp = p2->next;
            if (p1 == head){//if p2 < p1 when p1 == head
                while(p2->next->data < p1->data){
                    p2 = p2->next;
                    if(p2->next == NULL)
                        break;
                }
                temp = p2->next;
                cout<<"bbb"<<endl;
                p2->next = p1;
                p1->prev = p2;
                first = second;
                p2 = temp;
                continue;
            }
            if (p1 == tail && p1->data < p2->data){//if p1 < p2 when p1 == tail
                p1->next = p2;
                p2->prev = p1;
                break;
            }
            p1->prev->next = p2;//link the memory in normal case
            p2->prev = p1->prev;
            p2->next = p1;
            p1->prev = p2;
            //p1 = p1->next;
            p2 = temp;

    }
    
    return first; // change me!
}

/**
 * Sorts the current list by applying the Mergesort algorithm.
 */
template <class T>
void List<T>::sort()
{
    if (empty())
        return;
    head = mergesort(head, length);
    tail = head;
    while (tail->next != NULL)
        tail = tail->next;
}

/**
 * Sorts a chain of linked memory given a start node and a size.
 * This is the recursive helper for the Mergesort algorithm (i.e., this is
 * the divide-and-conquer step).
 *
 * @param start Starting point of the chain.
 * @param chainLength Size of the chain to be sorted.
 * @return A pointer to the beginning of the now sorted chain.
 */
template <class T>
typename List<T>::ListNode* List<T>::mergesort(ListNode* start, int chainLength)
{
    List<int> List2 = split(chainLength/2);
    if(chainLength <= 1)
        return start;
    cout<<start->data<<endl;
    cout<<List2.head->data<<endl;
    ListNode* p2 = mergesort(List2.head, chainLength - chainLength/2);
    //ListNode* p1 = mergesort(start, chainLength/2);
    
    cout<<p2->data<<endl;
    cout<<p2->next->data<<endl;
    /// @todo Graded in MP3.2
    return p2; // change me!
}
