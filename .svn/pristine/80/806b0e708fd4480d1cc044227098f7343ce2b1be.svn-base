/* Your code here! */
#include <iostream>
#include <queue> 
#include <time.h>
#include "maze.h"
using namespace std;
void SquareMaze::makeMaze(int w, int h){
	width = w;
	height = h;
	int n = 0;
	maze.resize(width);
	for(int i = 0; i < width; i++){
		maze[i].resize(height);
		for(int j = 0; j < height; j++){
			pair<int, int> coor(i, j);
			Square s(coor);
			maze[i][j] = s;
			set.addelements(n);
			n++;
		}
	}
	bfs();
	cout<<"makeMaze finished"<<endl;
}
void SquareMaze::bfs(){
	vector<vector<bool>> visited(width);
	//initialize the visited vector
	for(int i = 0; i < width; i++){
		visited[i].resize(height);
		for(int j = 0; j < height; j++){
			visited[i][j] = false;
		}
	}
	time_t t;
	srand((unsigned) time(&t));
	queue<Square> q;
	q.push(maze[0][0]);
	while(!q.empty()){
		Square s = q.front();
		q.pop();
		int x = s.coor.first; //width
		int y = s.coor.second;//height
		if(!visited[x][y]){
			visited[x][y] = true;
			int num = rand() % 2;//random generate the num of walls to be set
			int dir = rand() % 2;//random generate the collapsed wall
			int elementInSet = width * y + x;
			cout<<"random generator"<<endl;
			cout<<"dir = "<<dir<<endl;
			if(dir == 0 && x == width - 1)
				dir = 1;//cannot set the grid to be false
			if(dir == 1 && y == height - 1)
				dir = 0;//cannot set the grid to be false

			cout<<"x = "<<x<<" y = "<<y<<endl;
			cout<<"dir = "<<dir<<endl;
			if(dir == 0 && x != width - 1){
				int elementRightInSet = width * y + x + 1;
				if(set.find(elementInSet) != set.find(elementRightInSet)){
					setWall(x, y, 0, false);
					set.setunion(elementInSet, elementRightInSet);
				}
				dir = 100;//prevent executing again in the next if function
				if(y != height - 1 && num == 1)
					dir = 1;//try bottom
			}
			if(dir == 1){
				int elementBottomInSet = width * (y + 1) + x;
				if(set.find(elementInSet) != set.find(elementBottomInSet)){
					setWall(x, y, 1, false);
					set.setunion(elementInSet, elementBottomInSet);
				}
				if(x != width - 1 && num == 1)
					dir = 0;//try right
			}
			if(dir == 0 && x != width - 1){
				int elementRightInSet = width * y + x + 1;
				if(set.find(elementInSet) != set.find(elementRightInSet)){
					setWall(x, y, 0, false);
					set.setunion(elementInSet, elementRightInSet);
				}
				dir = 100;//no need to try
			}
			if(y + 1 < height)
				q.push(maze[x][y + 1]);
			if(x + 1 < width)
				q.push(maze[x + 1][y]);

		}
	}




}


bool SquareMaze::canTravel(int x, int y, int dir) const{
	//check if the parameter is reasonable
	if(x >= width || y >= height)
		return false;
	if(dir < 0 && dir > 3)
		return false;
	Square s;
	if(dir == 0){
		s = maze[x][y];
		if(s.rightWall && x + 1 < width)
			return true;
		else 
			return false;
	}
	else if(dir == 1){
		s = maze[x][y];
		if(s.bottomWall && y + 1 < height)
			return true;
		else 
			return false;
	}
	else if(dir == 2){
		if(x - 1 < 0)
			return false;
		s = maze[x - 1][y];
		if(s.rightWall)
			return true;
		else 
			return false;
	}
	else{
		if(y - 1 < 0)
			return false;
		s = maze[x][y - 1];
		if(s.bottomWall)
			return true;
		else 
			return false;
	}
}

void SquareMaze::setWall(int x, int y, int dir, bool exists){
	if(dir == 0){
		if(exists)
			maze[x][y].rightWall = true;
		else 
			maze[x][y].rightWall = false;
	}
	if(dir == 1){
		if(exists)
			maze[x][y].bottomWall = true;
		else 
			maze[x][y].bottomWall = false;
	}

}
vector<int> SquareMaze::solveMaze(){
	return vector<int>();
}
void SquareMaze::blacken(PNG &p, int x, int y, int dir) const{
	for(int k = 0; k <= 10; k++){
		if(dir == 0){
			p((x+1)*10, y*10+k)->red = 0;
			p((x+1)*10, y*10+k)->blue = 0;
			p((x+1)*10, y*10+k)->green = 0;
		}
		if(dir == 1){
			p(x*10+k, (y+1)*10)->red = 0;
			p(x*10+k, (y+1)*10)->blue = 0;
			p(x*10+k, (y+1)*10)->green = 0;
		}

	}
	



}
PNG* SquareMaze::drawMaze() const{
	int PNGWidth = width * 10 + 1;
	int PNGHeight = height * 10 + 1;
	PNG* p = new PNG(PNGWidth, PNGHeight);
	//for(int k = 0; k <= 10; k++){
	int k = 0;
		for(int i = 0; i < PNGWidth; i++){
			if(i < 1 || i > 9){
				(*p)(i, k)->red = 0;
				(*p)(i, k)->blue = 0;
				(*p)(i, k)->green = 0;
			}

		}
		for(int i = 0; i < PNGHeight; i++){
			(*p)(k, i)->red = 0;
			(*p)(k, i)->blue = 0;
			(*p)(k, i)->green = 0;
		}
	//}
	for(int i = 0; i < width; i++){
		for(int j = 0; j < height; j++){
			Square s = maze[i][j];
			//cout<<"x = "<<i<<" y = "<<j<<endl;
			if(s.rightWall){
				cout<<"drawright"<<endl;
				cout<<"x = "<<i<<" y = "<<j<<endl;
				blacken(*p, i, j, 0);
			}
			if(s.bottomWall){
				cout<<"drawbottom"<<endl;
				cout<<"x = "<<i<<" y = "<<j<<endl;
				blacken(*p, i, j, 1);
			}
		}
	}
	return p;
}
PNG* SquareMaze::drawMazeWithSolution(){
	PNG* p = new PNG;
	return p;
}


