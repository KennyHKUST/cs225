<html>
<head>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>

<style>
tr.total {
  border-top: solid 2px black;
  font-weight: bold;
}
tr.total td:first-child {
  text-align: right;
}
li.L0, li.L1, li.L2, li.L3, li.L5, li.L6, li.L7, li.L8 {
  list-style-type: decimal !important;
}
pre {
  font-size: 0.75rem;
}
h5 {
  margin-top: 10px;
}
</style>
</head>
<body>
<div class="container">
<h3>xinran2's feedback report for exam2</h3>
<hr>
<h4>Summary and Overall Grade</h4>
<table class="table table-sm" style="width: auto;">
  <thead>
    <tr>
      <th>Problem Name</th>
      <th colspan="4">Score</th>
    </tr>
  </head>
  <tbody>
    <tr>
      <td>Garden Copy Constructor</td>
      <td style="text-align: right;">100</td>
      <td>/</td>
      <td style="text-align: right;">100</td>
      <td></td>
    </tr>
    <tr>
      <td>The Greater Backpack</td>
      <td style="text-align: right;">100</td>
      <td>/</td>
      <td style="text-align: right;">100</td>
      <td></td>
    </tr>
    <tr class="total">
      <td>Total:</td>
      <td style="text-align: right;">200</td>
      <td>/</td>
      <td style="text-align: right;">200</td>
      <td>100.00%</td>
    </tr>
  </tbody>
</table>

<hr>

  <h4>&quot;Garden Copy Constructor&quot; Feedback</h4>

  <h5>Question Text</h5>
  <div style="border: solid 1px black; padding: 10px;">
    <h7 id="thesetup">The Setup</h7>
<p>Consider a <code>garden</code> class that helps manage a garden of flowers (each flower
is an instance of a <code>flower</code> class).  The <code>garden</code> class stores the flowers
in a 4x4 grid (private variable <code>flower ** grid</code>).</p>
<h7 id="theproblem">The Problem</h7>
<p>In the class <code>garden</code>, create a copy constructor.  The copied <code>garden</code> must be a
"deep copy", both allocating new memory for the <code>grid</code> and storing a copy
of each <code>flower</code> in the new <code>grid</code>.</p>
<p>You should assume that <code>grid</code> will always contain be full of exactly 16
flowers (a flower in each position, no need to worry about <code>NULL</code> values).
You need only to write the copy constructor (you do not need to write all
of the "big three").</p>
<p>Your code must compile and work <em>without</em> modifying any of the other helper
functions defined in the class (however, feel free to call them in your code!).</p>
<h7 id="compileandtest">Compile and Test</h7>
<p>A complete Makefile and tester code is provided for you.  To compile and test,
run:</p>
<pre><code>make
./garden-test
</code></pre>
  </div>

  <h5>File Submissions</h5>
    <div>
      garden.cpp
    </div>
    <div>
      <pre class="prettyprint linenums">#include &quot;flower.h&quot;
#include &quot;garden.h&quot;

garden::garden(flower *flowers) {
  this-&gt;grid &#x3D; new flower*[4];

  for (int i &#x3D; 0; i &lt; 4; i++) {
    this-&gt;grid[i] &#x3D; new flower[4];
    for (int j &#x3D; 0; j &lt; 4; j++) {
        this-&gt;grid[i][j] &#x3D; flowers[(i*4) + j];
    }
  }
}
garden::garden(garden &amp;rhs){
  grid &#x3D; new flower*[4];
  for (int i &#x3D; 0; i &lt; 4; i++){
    grid[i] &#x3D; new flower[4];
    for (int j &#x3D; 0; j &lt; 4; j++){
      setFlower(i, j, rhs.getFlower(i , j));
    }
  }

}

flower garden::getFlower(int row, int column) const {
  return this-&gt;grid[row][column];
}

void garden::setFlower(int row, int column, const flower &amp;f) {
  this-&gt;grid[row][column] &#x3D; f;
}
</pre>
    </div>
    <div>
      garden.h
    </div>
    <div>
      <pre class="prettyprint linenums">#ifndef _GARDEN_H
#define _GARDEN_H

#include &quot;flower.h&quot;

class garden {
public:
  garden(flower *flowers);
  garden(garden &amp;rhs);
  flower getFlower(int row, int column) const;
  void setFlower(int row, int column, const flower &amp;f);

private:
  flower **grid;
};

#endif
</pre>
    </div>

  <h5>Results of Tests</h5>
  <table class="table table-sm" style="width: auto;">
    <thead>
      <tr>
        <th>Problem Name</th>
        <th colspan="3">Score</th>
      </tr>
    </head>
    <tbody>
      <tr>
        <td>garden copy must match the original garden</td>
        <td style="text-align: right;">50</td>
        <td>/</td>
        <td style="text-align: right;">50</td>
      </tr>
      <tr>
        <td>modifying a copied garden must not change the original garden</td>
        <td style="text-align: right;">50</td>
        <td>/</td>
        <td style="text-align: right;">50</td>
      </tr>
      <tr class="total">
        <td>Total:</td>
        <td style="text-align: right;">100</td>
        <td>/</td>
        <td style="text-align: right;">100</td>
      </tr>
    </tbody>
  </table>

  <h5>Raw Output</h5>
  <div>
    <div>stdout</div>
    <pre style="border: solid 1px black";>g++ flower.cpp -std&#x3D;c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ garden.cpp -std&#x3D;c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ garden-test.cpp -std&#x3D;c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ flower.o garden.o garden-test.o -std&#x3D;c++1y -lpng -lpthread -o catch-tester
Match @0
Match @1
Match @2
Match @3
Match @4
Match @5
Match @6
Match @7
Match @8
Match @9
Match @10
Match @11
Match @12
Match @13
Match @14
Match @15
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (1 assertion in 1 test case)

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (4 assertions in 1 test case)

Match @0
Match @1
Match @2
Match @3
Match @4
Match @5
Match @6
Match @7
Match @8
Match @9
Match @10
Match @11
Match @12
Match @13
Match @14
Match @15
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (5 assertions in 2 test cases)

</pre>
  </div>
  <div>
    <div>stderr</div>
    <pre style="border: solid 1px black";></pre>
  </div>
  <hr>
  <h4>&quot;The Greater Backpack&quot; Feedback</h4>

  <h5>Question Text</h5>
  <div style="border: solid 1px black; padding: 10px;">
    <h7 id="thesetup">The Setup</h7>
<p>Consider a <code>backpack</code> class that holds up to a fixed number of items.  The
<code>backpack</code> class has three private variables:</p>
<ul>
<li><code>int size</code>, the maximum number of items that fits in the backpack.</li>
<li><code>int items</code>, the current number of items in the backpack.  There must never
be more items in the backpack than the size of the backpack (<code>items &lt;= size</code>).</li>
<li><code>int *item_weights</code>, an array of the weights of the items currently in
the backpack.  The length of the array will always be at least <code>items</code> length.</li>
</ul>
<h7 id="theproblem">The Problem</h7>
<p>In the <code>backpack</code> class, overload the <code>&gt;</code> (greater than) operator to
compare two <code>backpack</code> classes.</p>
<p>The backpack with the greater total weight (the sum of the first <code>items</code>
elements in <code>item_weights</code>) is considered to be the greater backpack.</p>
<p>Your code must compile and work <em>without</em> modifying any of the other helper
functions defined in the class (however, feel free to call them in your code!).</p>
<h7 id="compileandtest">Compile and Test</h7>
<p>A complete Makefile and tester code is provided for you.  To compile and test,
run:</p>
<pre><code>make
./backpack-test
</code></pre>
  </div>

  <h5>File Submissions</h5>
    <div>
      backpack.cpp
    </div>
    <div>
      <pre class="prettyprint linenums">#include &quot;backpack.h&quot;
#include&lt;iostream&gt;
using namespace std;
//
// In the &#x60;backpack&#x60; class, overload the &#x60;&gt;&#x60; (greater than) operator to
// compare two &#x60;backpack&#x60; classes.
//
// The backpack with the greater total weight (the sum of the first &#x60;items&#x60;
// elements in &#x60;item_weights&#x60;) is considered to be the greater backpack.
//

backpack::backpack(int size) : size(size), items(0) {
  this-&gt;item_weights &#x3D; new int[size];
}

bool backpack::addItem(int weight) {
  if (items &#x3D;&#x3D; size) {
    // Cannot add if the backpack is full of items
    return false;
  } else {
    // Otherwise, add the item
    this-&gt;item_weights[this-&gt;items] &#x3D; weight;
    this-&gt;items++;
    return true;
  }
}
bool backpack::operator&gt;(backpack rhs){
  int total &#x3D; 0, total2 &#x3D; 0;
  for (int i &#x3D; 0; i &lt; items; i++){
    total +&#x3D; item_weights[i];
  }
  for (int i &#x3D; 0; i &lt; rhs.items; i++){
    total2 +&#x3D; rhs.item_weights[i];
  }
 
  if(total &gt; total2){
    return true;
  }
  return false;
}
int backpack::getSize() const {
  return this-&gt;size;
}

int backpack::getItemCount() const {
  return this-&gt;items;
}

const int *backpack::getItems() const {
  return this-&gt;item_weights;
}
</pre>
    </div>
    <div>
      backpack.h
    </div>
    <div>
      <pre class="prettyprint linenums">#ifndef _BACKPACK_H
#define _BACKPACK_H

//
// In the &#x60;backpack&#x60; class, overload the &#x60;&gt;&#x60; (greater than) operator to
// compare two &#x60;backpack&#x60; classes.
//
// The backpack with the greater total weight (the sum of the first &#x60;items&#x60;
// elements in &#x60;item_weights&#x60;) is considered to be the greater backpack.
//


class backpack {
public:
  backpack(int size);

  int getSize() const;
  int getItemCount() const;
  const int *getItems() const;
  bool addItem(int weight);
  bool operator&gt; (backpack rhs);
private:
  int size;
  int items;
  int *item_weights;
};

#endif
</pre>
    </div>

  <h5>Results of Tests</h5>
  <table class="table table-sm" style="width: auto;">
    <thead>
      <tr>
        <th>Problem Name</th>
        <th colspan="3">Score</th>
      </tr>
    </head>
    <tbody>
      <tr>
        <td>heavier one-element, non-full backpack must be greater than lighter backpack</td>
        <td style="text-align: right;">20</td>
        <td>/</td>
        <td style="text-align: right;">20</td>
      </tr>
      <tr>
        <td>lighter one-element, non-full backpack must not be greater than lighter backpack</td>
        <td style="text-align: right;">20</td>
        <td>/</td>
        <td style="text-align: right;">20</td>
      </tr>
      <tr>
        <td>one-element non-fill backpack must not be greater than itself backpack</td>
        <td style="text-align: right;">20</td>
        <td>/</td>
        <td style="text-align: right;">20</td>
      </tr>
      <tr>
        <td>multi-element backpack</td>
        <td style="text-align: right;">10</td>
        <td>/</td>
        <td style="text-align: right;">10</td>
      </tr>
      <tr>
        <td>empty backpack</td>
        <td style="text-align: right;">15</td>
        <td>/</td>
        <td style="text-align: right;">15</td>
      </tr>
      <tr>
        <td>full backpacks</td>
        <td style="text-align: right;">15</td>
        <td>/</td>
        <td style="text-align: right;">15</td>
      </tr>
      <tr class="total">
        <td>Total:</td>
        <td style="text-align: right;">100</td>
        <td>/</td>
        <td style="text-align: right;">100</td>
      </tr>
    </tbody>
  </table>

  <h5>Raw Output</h5>
  <div>
    <div>stdout</div>
    <pre style="border: solid 1px black";>g++ backpack.cpp -std&#x3D;c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ backpack-test.cpp -std&#x3D;c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ backpack.o backpack-test.o -std&#x3D;c++1y -lpng -lpthread -o catch-tester
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (1 assertion in 1 test case)

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (1 assertion in 1 test case)

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (1 assertion in 1 test case)

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (3 assertions in 1 test case)

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (1 assertion in 1 test case)

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (3 assertions in 1 test case)

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
All tests passed (10 assertions in 6 test cases)

</pre>
  </div>
  <div>
    <div>stderr</div>
    <pre style="border: solid 1px black";></pre>
  </div>
  <hr>
</div>
</body>
</html>
