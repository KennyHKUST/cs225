Exam #2 score (xinran2): 200/200

=== Grade Feedback for Problem "programming_bigThree_createCopyCtor_garden" ===
[50/50]: Test: garden copy must match the original garden
[50/50]: Test: modifying a copied garden must not change the original garden
=====
[100/100]

--- stdout ---
g++ flower.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ garden.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ garden-test.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ flower.o garden.o garden-test.o -std=c++1y -lpng -lpthread -o catch-tester
Match @0
Match @1
Match @2
Match @3
Match @4
Match @5
Match @6
Match @7
Match @8
Match @9
Match @10
Match @11
Match @12
Match @13
Match @14
Match @15
===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (4 assertions in 1 test case)

Match @0
Match @1
Match @2
Match @3
Match @4
Match @5
Match @6
Match @7
Match @8
Match @9
Match @10
Match @11
Match @12
Match @13
Match @14
Match @15
===============================================================================
All tests passed (5 assertions in 2 test cases)



--- stderr ---


--- submitted file: garden.cpp ---
#include "flower.h"
#include "garden.h"

garden::garden(flower *flowers) {
  this->grid = new flower*[4];

  for (int i = 0; i < 4; i++) {
    this->grid[i] = new flower[4];
    for (int j = 0; j < 4; j++) {
        this->grid[i][j] = flowers[(i*4) + j];
    }
  }
}
garden::garden(garden &rhs){
  grid = new flower*[4];
  for (int i = 0; i < 4; i++){
    grid[i] = new flower[4];
    for (int j = 0; j < 4; j++){
      setFlower(i, j, rhs.getFlower(i , j));
    }
  }

}

flower garden::getFlower(int row, int column) const {
  return this->grid[row][column];
}

void garden::setFlower(int row, int column, const flower &f) {
  this->grid[row][column] = f;
}

--- submitted file: garden.h ---
#ifndef _GARDEN_H
#define _GARDEN_H

#include "flower.h"

class garden {
public:
  garden(flower *flowers);
  garden(garden &rhs);
  flower getFlower(int row, int column) const;
  void setFlower(int row, int column, const flower &f);

private:
  flower **grid;
};

#endif


=== Grade Feedback for Problem "programming_operator_gt_backpack" ===
[20/20]: Test: heavier one-element, non-full backpack must be greater than lighter backpack
[20/20]: Test: lighter one-element, non-full backpack must not be greater than lighter backpack
[20/20]: Test: one-element non-fill backpack must not be greater than itself backpack
[10/10]: Test: multi-element backpack
[15/15]: Test: empty backpack
[15/15]: Test: full backpacks
=====
[100/100]

--- stdout ---
g++ backpack.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ backpack-test.cpp -std=c++1y -c -g -O0 -Wall -Wextra -pedantic
g++ backpack.o backpack-test.o -std=c++1y -lpng -lpthread -o catch-tester
===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (3 assertions in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (3 assertions in 1 test case)

===============================================================================
All tests passed (10 assertions in 6 test cases)



--- stderr ---


--- submitted file: backpack.cpp ---
#include "backpack.h"
#include<iostream>
using namespace std;
//
// In the `backpack` class, overload the `>` (greater than) operator to
// compare two `backpack` classes.
//
// The backpack with the greater total weight (the sum of the first `items`
// elements in `item_weights`) is considered to be the greater backpack.
//

backpack::backpack(int size) : size(size), items(0) {
  this->item_weights = new int[size];
}

bool backpack::addItem(int weight) {
  if (items == size) {
    // Cannot add if the backpack is full of items
    return false;
  } else {
    // Otherwise, add the item
    this->item_weights[this->items] = weight;
    this->items++;
    return true;
  }
}
bool backpack::operator>(backpack rhs){
  int total = 0, total2 = 0;
  for (int i = 0; i < items; i++){
    total += item_weights[i];
  }
  for (int i = 0; i < rhs.items; i++){
    total2 += rhs.item_weights[i];
  }
 
  if(total > total2){
    return true;
  }
  return false;
}
int backpack::getSize() const {
  return this->size;
}

int backpack::getItemCount() const {
  return this->items;
}

const int *backpack::getItems() const {
  return this->item_weights;
}

--- submitted file: backpack.h ---
#ifndef _BACKPACK_H
#define _BACKPACK_H

//
// In the `backpack` class, overload the `>` (greater than) operator to
// compare two `backpack` classes.
//
// The backpack with the greater total weight (the sum of the first `items`
// elements in `item_weights`) is considered to be the greater backpack.
//


class backpack {
public:
  backpack(int size);

  int getSize() const;
  int getItemCount() const;
  const int *getItems() const;
  bool addItem(int weight);
  bool operator> (backpack rhs);
private:
  int size;
  int items;
  int *item_weights;
};

#endif


