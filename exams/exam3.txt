Exam #3 score (xinran2): 22/200

=== Grade Feedback for Problem "programming_linkedlist_animalShelter_3func" ===
[6/6]: Test: Empty list returns NULL
[4/4]: Test: List of 1 dog returns NULL when requesting a cat
[4/4]: Test: List of multiple dogs returns NULL when requesting a cat
[4/4]: Test: List of 1 cat returns NULL when requesting a dog
[4/4]: Test: List of multiple cats returns NULL when requesting a dog
[0/4]: Test: Removing the only element in the list (reference check)
     Message: SIGSEGV
[0/4]: Test: Removing from a one-element list (value check)
     Message: SIGSEGV
[0/20]: Test: Full exam-provided example (reference)
     Message: SIGSEGV
[0/50]: Test: Full exam-provided example (value)
     Message: SIGSEGV
=====
[22/100]

--- stdout ---
g++ animal.cpp cat.cpp dog.cpp animal-test.cpp list.cpp -std=c++1y -lpng -lpthread -g -o animal-test
===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

Dog
Ruff
Dog
Chey
===============================================================================
All tests passed (1 assertion in 1 test case)

===============================================================================
All tests passed (1 assertion in 1 test case)

Cat
Cat
===============================================================================
All tests passed (1 assertion in 1 test case)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
animal-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
Removing the only element in the list (reference check)
-------------------------------------------------------------------------------
animal-test.cpp:78
...............................................................................

animal-test.cpp:78: FAILED:
due to a fatal error condition:
  Adding Mia to the animalList
  Checking if Mia was adopted
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 1 | 1 failed
assertions: 1 | 1 failed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
animal-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
Removing from a one-element list (value check)
-------------------------------------------------------------------------------
animal-test.cpp:95
...............................................................................

animal-test.cpp:95: FAILED:
due to a fatal error condition:
  Adding Mia to the animalList
  Checking if Mia was adopted
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 1 | 1 failed
assertions: 1 | 1 failed

Cat
Cat
Cat
Cat
Cat
Fiona
Cat
Mia

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
animal-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
Full exam-provided example (reference)
-------------------------------------------------------------------------------
animal-test.cpp:113
...............................................................................

animal-test.cpp:113: FAILED:
  {Unknown expression after the reported line}
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 1 | 1 failed
assertions: 5 | 4 passed | 1 failed

Cat
Cat
Cat
Cat
Cat
Fiona
Cat
Mia

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
animal-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
Full exam-provided example (value)
-------------------------------------------------------------------------------
animal-test.cpp:148
...............................................................................

animal-test.cpp:148: FAILED:
  {Unknown expression after the reported line}
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 1 | 1 failed
assertions: 5 | 4 passed | 1 failed

Dog
Ruff
Dog
Chey
Cat
Cat

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
animal-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
Removing the only element in the list (reference check)
-------------------------------------------------------------------------------
animal-test.cpp:78
...............................................................................

animal-test.cpp:78: FAILED:
due to a fatal error condition:
  Adding Mia to the animalList
  Checking if Mia was adopted
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 6 | 5 passed | 1 failed
assertions: 6 | 5 passed | 1 failed



--- stderr ---


--- submitted file: list.cpp ---
#define _LIST_CPP
#include "list.h"
#include "animal.h"
#include <cstddef>
#include <iostream>
using namespace std;
//
//  In the `List` class, complete the `adoptCat`, `adoptDog`, and `adoptAny`
// member function in `list.cpp`.  Each of these functions must:
//
// 1. find the animal closest to the head of the list that meets the function
//    preferences (if a suitable animal exists),
// 2. remove that node from the list, and
// 3. return a pointer to the `Animal` (if a suitable animal was found) **or**
//    `NULL` if no animal was found
//

template <class T>
const Animal *List<T>::adoptCat() {
  ListNode *p = head;
  while(p->next != NULL){
    cout<<p->data->getType()<<endl;
    cout<<p->data->getName()<<endl;
    if (p->data->getType() == "Cat"){
      ListNode *ret = p->next;
      head = ret;
      cout<<head->data->getType()<<endl;
      cout<<head->data->getName()<<endl;
      return p->data;
    }
    if (p->next->data->getType() == "Cat"){
      ListNode *ret = p->next;
      p->next = ret->next;
      cout<<head->data->getType()<<endl;
      cout<<head->data->getName()<<endl;
      return ret->data;
    }
    p = p->next;
  }
  return NULL;
}

template <class T>
const Animal *List<T>::adoptDog() {
  ListNode *p = head;
  while(p->next != NULL){
    cout<<p->data->getType()<<endl;
    if (p->data->getType() == "Dog"){
      ListNode *ret = p->next;
      head = ret;
      cout<<p->data->getType()<<endl;
      cout<<p->data->getName()<<endl;
      return p->data;
    }
    if (p->next->data->getType() == "Dog"){
      ListNode *ret = p->next;
      p->next = ret->next;
      return ret->data;
    }
    p = p->next;
  }
  return NULL;
}

template <class T>
const Animal *List<T>::adoptAny() {
  if(head == NULL)
    return NULL;
  ListNode *p = head;
  head = head -> next;
  return head->data;
}



template <class T>
List<T>::List() {
  this->head = NULL;
}

template <class T>
void List<T>::insertFront(const T& ndata) {
  ListNode* node = new ListNode(ndata);
  node->next = head;
  this->head = node;
}


=== Grade Feedback for Problem "programming_linkedlist_gameNight_leaders4_end" ===
[0/30]: Test: List of six people (by ref)
     Message: SIGSEGV
[0/70]: Test: List of six people (by value)
     Message: SIGSEGV
=====
[0/100]

--- stdout ---
g++ gameNight-test.cpp list-p2.cpp person.cpp -std=c++1y -lpng -lpthread -g -o gameNight-test

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gameNight-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
List of six people (by ref)
-------------------------------------------------------------------------------
gameNight-test.cpp:26
...............................................................................

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffd9724e260 == 0x00007ffd9724e250
with message:
  [3]: Erin; expected: Faythe

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffd9724e250 == 0x00007ffd9724e2a0
with message:
  [4]: Faythe; expected: Alice

gameNight-test.cpp:26: FAILED:
  {Unknown expression after the reported line}
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 1 | 1 failed
assertions: 6 | 3 passed | 3 failed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gameNight-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
List of six people (by value)
-------------------------------------------------------------------------------
gameNight-test.cpp:54
...............................................................................

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Erin" == "Faythe"
with message:
  [3]: Erin; expected: Faythe

gameNight-test.cpp:22: FAILED:
  CHECK( p->getName() == expected->getName() )
with expansion:
  "Faythe" == "Alice"
with message:
  [4]: Faythe; expected: Alice

gameNight-test.cpp:54: FAILED:
  {Unknown expression after the reported line}
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 1 | 1 failed
assertions: 6 | 3 passed | 3 failed


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gameNight-test is a Catch v1.8.1 host application.
Run with -? for options

-------------------------------------------------------------------------------
List of six people (by ref)
-------------------------------------------------------------------------------
gameNight-test.cpp:26
...............................................................................

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffe6fdde740 == 0x00007ffe6fdde730
with message:
  [3]: Erin; expected: Faythe

gameNight-test.cpp:16: FAILED:
  CHECK( p == expected )
with expansion:
  0x00007ffe6fdde730 == 0x00007ffe6fdde780
with message:
  [4]: Faythe; expected: Alice

gameNight-test.cpp:26: FAILED:
  {Unknown expression after the reported line}
due to a fatal error condition:
  SIGSEGV - Segmentation violation signal

===============================================================================
test cases: 1 | 1 failed
assertions: 6 | 3 passed | 3 failed



--- stderr ---


--- submitted file: list-p2.cpp ---
#define _LIST_CPP
#include "list.h"
#include "person.h"

#include <cstddef>


//
// In the `List` class, complete the `reorganizeList` member function in
// `list.cpp`.  The `reorganizeList` function must place all non-leaders at the
// front of the list followed by all leaders, while otherwise maintain the
// same order.
//

template <class T>
void List<T>::reorganizeList() {
    int n = 0;

    ListNode *p = head;
    while(p != NULL){
      p = p->next;
      n ++;
    }
    p = head;
    for (int k = 0; k < n; k++){
      if(p->leader){
        ListNode *x = p;
        head = head->next;
        while(x->next!=NULL){
          ListNode *tail = p;
          x->next = p;
          p->next = NULL;
        }

      }
      p = head;
    }


}


template <class T>
List<T>::List() {
  this->head = NULL;
}

template <class T>
void List<T>::insertBack(const T& ndata) {
  static int ct = 0;

  ListNode* node = new ListNode(ndata);
  node->leader = (ct++ % 4 == 0);

  if (!head) {
    head = node;
  } else {
    ListNode *thru = head;
    while (thru->next != NULL) { thru = thru->next; }
    thru->next = node;
  }
}

template <class T>
const T *List<T>::get(int index) const {
  ListNode *thru = head;
  while (thru && index-- > 0) { thru = thru->next; }

  if (thru) { return &(thru->data); }
  else      { return NULL; }
}


